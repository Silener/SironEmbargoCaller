//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using VCSBankInstantPaymentsSironEmbargoClient.SIRONEmbargoClient;

namespace VCSBankInstantPaymentsSironEmbargoClient
{

    public class TransactionScoring03RequestSender
    {
        /// <summary>
        /// Данни за потребителя
        /// </summary>
        private static LoginData loginData = new LoginData();

        /// <summary>
        /// Данни за контекста на заявката
        /// </summary>
        private static TransactionScoringContext03 transactionScoringContext = new TransactionScoringContext03();

        /// <summary>
        /// Данните на заявката
        /// </summary>
        private static TransactionData transactionData = new TransactionData();

        /// <summary>
        /// URL. към който пращаме заявката
        /// </summary>
        private string serviceURL;
		
		/// <summary>
        /// Режим на детайлен резултат
        /// </summary>
        private static readonly string verboseSearchMode = "verbose";

        /// <summary>
        /// Първи елемент в масив
        /// </summary>
        private static readonly int firstElement = 0;

        /// <summary>
        /// Връщания резултат
        /// </summary>
        public bool isHitFound;

		/// <summary>
		/// Клас за логване на съобщения
		/// </summary>
		private ISironLogger Logger;

		public TransactionScoring03RequestSender(TransactionScoring03RequestData sironScoreTransactionData, ISironLogger logger)
        {
            loginData.userName = sironScoreTransactionData.username;
            loginData.pass = sironScoreTransactionData.password;

            transactionScoringContext.paymentSystem = sironScoreTransactionData.paymentSystem;
            transactionScoringContext.trxFormat = sironScoreTransactionData.format;
            transactionScoringContext.inOut = sironScoreTransactionData.transferDirection;
            transactionScoringContext.searchMode = sironScoreTransactionData.searchMode;
            transactionScoringContext.instance = sironScoreTransactionData.multiCheckInstance;

            transactionData.xmlData = Encoding.UTF8.GetBytes(sironScoreTransactionData.xmlData);

			serviceURL = sironScoreTransactionData.serviceURL;

			isHitFound = false;
			Logger = logger;
		}

        public void CheckIsHitFound(ref RequestResult03 response)
        {
            // Проверяваме дали сме подали режим verbose и дали имаме в отговора повече детайли. При simple нямаме такива
            if (!transactionScoringContext.searchMode.Equals(verboseSearchMode))
            {
                Logger.LogSironMessage("Check siron response for hit is deactivated");
                return;
            }//if

            if (response.transactionResults[firstElement].detailResults == null || response.transactionResults[firstElement].detailResults.Length <= 0)
                return;

            if (response.transactionResults[firstElement].detailResults[firstElement].hits == null || response.transactionResults[firstElement].detailResults[firstElement].hits.Length <= 0)
                return;

            isHitFound = true;
        }

        public bool ScoreTransactionSend()
        {
			bool errorFound = false;
			List<string> transactionsIDsList = new List<string>();

			try
			{
				string bindingConfigurationName = serviceURL.StartsWith("https:") ? "Siron_Https" : "Siron_Http";
				BasicHttpBinding binding = new BasicHttpBinding(bindingConfigurationName);
				EndpointAddress endpointAddress = new EndpointAddress(serviceURL);

				TransactionScoring03Client client = new TransactionScoring03Client(binding, endpointAddress);

				string message = String.Format("Begin API call /scoreTransaction/. Service URL:{0} ", serviceURL);
				Logger.LogSironMessage(message);

				RequestResult03 response = client.scoreTransaction(loginData, transactionScoringContext, transactionData);

				message = String.Format("End API call /scoreTransaction/");
				Logger.LogSironMessage(message);

				if (response is null)
				{
					message = String.Format("Empty response was returned by Srion Web Service /scoreTransaction/");
					Logger.LogSironMessage(message);
					return false;
				}

				if (response.transactionResults != null)
				{
					for (int i = 0; i < response.transactionResults.Length; i++)
					{
						if (String.IsNullOrEmpty(response.transactionResults[i].transactionId))
						{
							message = String.Format("Siron Check returned empty transactionID. Cannot close empty transaction.");
							Logger.LogSironMessage(message);
							continue;
						}// if

						transactionsIDsList.Add(response.transactionResults[i].transactionId);
					}// for
				}

				if (transactionsIDsList.Count > 0)
				{
					message = String.Format("Begin API call /closeTransactions/");
					Logger.LogSironMessage(message);

					RequestResult03 closeTransactionsResponse = client.closeTransactions(loginData, transactionsIDsList.ToArray());

					message = String.Format("End API call /closeTransactions/");
					Logger.LogSironMessage(message);

					message = String.Format("Closing transactions /closeTransactions/\"{0}\" ended with message \"{1}\".", String.Join(", ", transactionsIDsList), closeTransactionsResponse.errorText);
					Logger.LogSironMessage(message);
				}// if

				if (response.errorText.Length > 0)
				{
					message = string.Format("ScoreTransaction returned error with code: \"{0}\", error text: \"{1}\".", response.returnValue, response.errorText);
					Logger.LogSironMessage(message);
					errorFound = true;
				}

				if (!errorFound && response.transactionResults.Length == 0 || response.returnValue == 0)
				{
					message = String.Format("Could not perform the ScoreTransaction request.");
					Logger.LogSironMessage(message);
					errorFound = true;
				}

				client.Close();

				if (errorFound)
					return false;

				CheckIsHitFound(ref response);
			}

			catch (Exception exception)
			{
				Logger.LogSironMessage(exception.Message);
				return false;
			}

			return true;
		}
		
    }
}
